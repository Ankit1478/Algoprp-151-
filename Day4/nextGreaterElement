class Solution {
    public int nextGreaterElement(int n) {
    // convert number in char Array
      char[] number = String.valueOf(n).toCharArray();
       int i,j;
    // example  number=[2,1]  reverse loop 
    // 2>1 it is in descending order so break the array
    // another example number =[1,2] 
    // 1>2 ==false so this loop not work  for this condtion 
        for ( i = number.length-1; i > 0; i--){
            if (number[i-1] < number[i]){
              break;
            }
        }
         // If no such digit is found, its the edge case 1.
         if(i==0) return -1;
        
        int x=number[i-1],smallest=i;
        for( j=i+1;j<number.length;j++){
            if(number[j] > x && number[j]<=number[smallest]){
                smallest=j;
            }
        }
        char temp = number[i-1];
        number[i-1] = number[smallest];
        number[smallest] = temp;
         Arrays.sort(number, i, number.length);
         /*String.valueOf(digits): This converts the character array digits into a string    
         representation. For example, if digits = {'2', '1'}, then String.valueOf(digits) will 
         return the string "21"
         In same way long is used instead for  String.value.
         This parses the string obtained from String.valueOf(digits) and converts it into a long 
         integer.
          */
         long val = Long.parseLong(new String(number));
        return (val <= Integer.MAX_VALUE) ? (int) val : -1;

    }
}
